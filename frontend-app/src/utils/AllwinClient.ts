//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v11.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

/* tslint:disable */
/* eslint-disable */
// ReSharper disable InconsistentNaming

export class AdminClient {
    private http: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> };
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, http?: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> }) {
        this.http = http ? http : window as any;
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "https://localhost:44356";
    }

    getVehicles(signal?: AbortSignal | undefined): Promise<Vehicle[]> {
        let url_ = this.baseUrl + "/api/Admin/GetVehicles";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            signal,
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetVehicles(_response);
        });
    }

    protected processGetVehicles(response: Response): Promise<Vehicle[]> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(Vehicle.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<Vehicle[]>(null as any);
    }
}

export class DriverClient {
    private http: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> };
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, http?: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> }) {
        this.http = http ? http : window as any;
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "https://localhost:44356";
    }

    getStops(areaId: string | undefined, vehicleId: string | undefined, weekday: number | undefined, signal?: AbortSignal | undefined): Promise<Stops> {
        let url_ = this.baseUrl + "/api/Driver/GetStops?";
        if (areaId === null)
            throw new Error("The parameter 'areaId' cannot be null.");
        else if (areaId !== undefined)
            url_ += "areaId=" + encodeURIComponent("" + areaId) + "&";
        if (vehicleId === null)
            throw new Error("The parameter 'vehicleId' cannot be null.");
        else if (vehicleId !== undefined)
            url_ += "vehicleId=" + encodeURIComponent("" + vehicleId) + "&";
        if (weekday === null)
            throw new Error("The parameter 'weekday' cannot be null.");
        else if (weekday !== undefined)
            url_ += "weekday=" + encodeURIComponent("" + weekday) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            signal,
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetStops(_response);
        });
    }

    protected processGetStops(response: Response): Promise<Stops> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = Stops.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<Stops>(null as any);
    }
}

export class Vehicle implements IVehicle {
    gid!: string;
    vehicleName!: string;
    capacity!: number;
    depotId!: string;
    pickups!: Pickup[];
    deliveries!: Delivery[];

    constructor(data?: IVehicle) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.gid = _data["gid"] !== undefined ? _data["gid"] : <any>null;
            this.vehicleName = _data["vehicleName"] !== undefined ? _data["vehicleName"] : <any>null;
            this.capacity = _data["capacity"] !== undefined ? _data["capacity"] : <any>null;
            this.depotId = _data["depotId"] !== undefined ? _data["depotId"] : <any>null;
            if (Array.isArray(_data["pickups"])) {
                this.pickups = [] as any;
                for (let item of _data["pickups"])
                    this.pickups!.push(Pickup.fromJS(item));
            }
            else {
                this.pickups = <any>null;
            }
            if (Array.isArray(_data["deliveries"])) {
                this.deliveries = [] as any;
                for (let item of _data["deliveries"])
                    this.deliveries!.push(Delivery.fromJS(item));
            }
            else {
                this.deliveries = <any>null;
            }
        }
    }

    static fromJS(data: any): Vehicle {
        data = typeof data === 'object' ? data : {};
        let result = new Vehicle();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["gid"] = this.gid !== undefined ? this.gid : <any>null;
        data["vehicleName"] = this.vehicleName !== undefined ? this.vehicleName : <any>null;
        data["capacity"] = this.capacity !== undefined ? this.capacity : <any>null;
        data["depotId"] = this.depotId !== undefined ? this.depotId : <any>null;
        if (Array.isArray(this.pickups)) {
            data["pickups"] = [];
            for (let item of this.pickups)
                data["pickups"].push(item.toJSON());
        }
        if (Array.isArray(this.deliveries)) {
            data["deliveries"] = [];
            for (let item of this.deliveries)
                data["deliveries"].push(item.toJSON());
        }
        return data;
    }
}

export interface IVehicle {
    gid: string;
    vehicleName: string;
    capacity: number;
    depotId: string;
    pickups: Pickup[];
    deliveries: Delivery[];
}

export class Pickup implements IPickup {
    gid!: string;
    pickupName!: string;
    contactName!: string;
    contactPhoneNumber!: string;
    avarageVolume!: number;
    openingHour!: number;
    closingHour!: number;
    avarageStoptime!: number;
    vehicleId!: string;
    shape!: Point;
    active!: boolean;
    pickupType!: PickupType;

    constructor(data?: IPickup) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.gid = _data["gid"] !== undefined ? _data["gid"] : <any>null;
            this.pickupName = _data["pickupName"] !== undefined ? _data["pickupName"] : <any>null;
            this.contactName = _data["contactName"] !== undefined ? _data["contactName"] : <any>null;
            this.contactPhoneNumber = _data["contactPhoneNumber"] !== undefined ? _data["contactPhoneNumber"] : <any>null;
            this.avarageVolume = _data["avarageVolume"] !== undefined ? _data["avarageVolume"] : <any>null;
            this.openingHour = _data["openingHour"] !== undefined ? _data["openingHour"] : <any>null;
            this.closingHour = _data["closingHour"] !== undefined ? _data["closingHour"] : <any>null;
            this.avarageStoptime = _data["avarageStoptime"] !== undefined ? _data["avarageStoptime"] : <any>null;
            this.vehicleId = _data["vehicleId"] !== undefined ? _data["vehicleId"] : <any>null;
            this.shape = _data["shape"] ? Point.fromJS(_data["shape"]) : <any>null;
            this.active = _data["active"] !== undefined ? _data["active"] : <any>null;
            this.pickupType = _data["pickupType"] !== undefined ? _data["pickupType"] : <any>null;
        }
    }

    static fromJS(data: any): Pickup {
        data = typeof data === 'object' ? data : {};
        let result = new Pickup();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["gid"] = this.gid !== undefined ? this.gid : <any>null;
        data["pickupName"] = this.pickupName !== undefined ? this.pickupName : <any>null;
        data["contactName"] = this.contactName !== undefined ? this.contactName : <any>null;
        data["contactPhoneNumber"] = this.contactPhoneNumber !== undefined ? this.contactPhoneNumber : <any>null;
        data["avarageVolume"] = this.avarageVolume !== undefined ? this.avarageVolume : <any>null;
        data["openingHour"] = this.openingHour !== undefined ? this.openingHour : <any>null;
        data["closingHour"] = this.closingHour !== undefined ? this.closingHour : <any>null;
        data["avarageStoptime"] = this.avarageStoptime !== undefined ? this.avarageStoptime : <any>null;
        data["vehicleId"] = this.vehicleId !== undefined ? this.vehicleId : <any>null;
        data["shape"] = this.shape ? this.shape.toJSON() : <any>null;
        data["active"] = this.active !== undefined ? this.active : <any>null;
        data["pickupType"] = this.pickupType !== undefined ? this.pickupType : <any>null;
        return data;
    }
}

export interface IPickup {
    gid: string;
    pickupName: string;
    contactName: string;
    contactPhoneNumber: string;
    avarageVolume: number;
    openingHour: number;
    closingHour: number;
    avarageStoptime: number;
    vehicleId: string;
    shape: Point;
    active: boolean;
    pickupType: PickupType;
}

export abstract class Geometry implements IGeometry {
    factory!: GeometryFactory | null;
    userData!: any | null;
    srid!: number;
    precisionModel!: PrecisionModel | null;
    numGeometries!: number;
    isSimple!: boolean;
    isValid!: boolean;
    area!: number;
    length!: number;
    centroid!: Point | null;
    interiorPoint!: Point | null;
    pointOnSurface!: Point | null;
    envelope!: Geometry | null;
    envelopeInternal!: Envelope | null;
    isRectangle!: boolean;

    constructor(data?: IGeometry) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.factory = _data["factory"] ? GeometryFactory.fromJS(_data["factory"]) : <any>null;
            this.userData = _data["userData"] !== undefined ? _data["userData"] : <any>null;
            this.srid = _data["srid"] !== undefined ? _data["srid"] : <any>null;
            this.precisionModel = _data["precisionModel"] ? PrecisionModel.fromJS(_data["precisionModel"]) : <any>null;
            this.numGeometries = _data["numGeometries"] !== undefined ? _data["numGeometries"] : <any>null;
            this.isSimple = _data["isSimple"] !== undefined ? _data["isSimple"] : <any>null;
            this.isValid = _data["isValid"] !== undefined ? _data["isValid"] : <any>null;
            this.area = _data["area"] !== undefined ? _data["area"] : <any>null;
            this.length = _data["length"] !== undefined ? _data["length"] : <any>null;
            this.centroid = _data["centroid"] ? Point.fromJS(_data["centroid"]) : <any>null;
            this.interiorPoint = _data["interiorPoint"] ? Point.fromJS(_data["interiorPoint"]) : <any>null;
            this.pointOnSurface = _data["pointOnSurface"] ? Point.fromJS(_data["pointOnSurface"]) : <any>null;
            this.envelope = _data["envelope"] ? Geometry.fromJS(_data["envelope"]) : <any>null;
            this.envelopeInternal = _data["envelopeInternal"] ? Envelope.fromJS(_data["envelopeInternal"]) : <any>null;
            this.isRectangle = _data["isRectangle"] !== undefined ? _data["isRectangle"] : <any>null;
        }
    }

    static fromJS(data: any): Geometry {
        data = typeof data === 'object' ? data : {};
        throw new Error("The abstract class 'Geometry' cannot be instantiated.");
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["factory"] = this.factory ? this.factory.toJSON() : <any>null;
        data["userData"] = this.userData !== undefined ? this.userData : <any>null;
        data["srid"] = this.srid !== undefined ? this.srid : <any>null;
        data["precisionModel"] = this.precisionModel ? this.precisionModel.toJSON() : <any>null;
        data["numGeometries"] = this.numGeometries !== undefined ? this.numGeometries : <any>null;
        data["isSimple"] = this.isSimple !== undefined ? this.isSimple : <any>null;
        data["isValid"] = this.isValid !== undefined ? this.isValid : <any>null;
        data["area"] = this.area !== undefined ? this.area : <any>null;
        data["length"] = this.length !== undefined ? this.length : <any>null;
        data["centroid"] = this.centroid ? this.centroid.toJSON() : <any>null;
        data["interiorPoint"] = this.interiorPoint ? this.interiorPoint.toJSON() : <any>null;
        data["pointOnSurface"] = this.pointOnSurface ? this.pointOnSurface.toJSON() : <any>null;
        data["envelope"] = this.envelope ? this.envelope.toJSON() : <any>null;
        data["envelopeInternal"] = this.envelopeInternal ? this.envelopeInternal.toJSON() : <any>null;
        data["isRectangle"] = this.isRectangle !== undefined ? this.isRectangle : <any>null;
        return data;
    }
}

export interface IGeometry {
    factory: GeometryFactory | null;
    userData: any | null;
    srid: number;
    precisionModel: PrecisionModel | null;
    numGeometries: number;
    isSimple: boolean;
    isValid: boolean;
    area: number;
    length: number;
    centroid: Point | null;
    interiorPoint: Point | null;
    pointOnSurface: Point | null;
    envelope: Geometry | null;
    envelopeInternal: Envelope | null;
    isRectangle: boolean;
}

export class Point extends Geometry implements IPoint {
    coordinateSequence!: CoordinateSequence | null;
    coordinates!: Coordinate[] | null;
    numPoints!: number;
    isEmpty!: boolean;
    dimension!: Dimension;
    boundaryDimension!: Dimension;
    x!: number;
    y!: number;
    coordinate!: Coordinate | null;
    geometryType!: string | null;
    ogcGeometryType!: OgcGeometryType;
    boundary!: Geometry | null;
    z!: number;
    m!: number;

    constructor(data?: IPoint) {
        super(data);
    }

    override init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.coordinateSequence = _data["coordinateSequence"] ? CoordinateSequence.fromJS(_data["coordinateSequence"]) : <any>null;
            if (Array.isArray(_data["coordinates"])) {
                this.coordinates = [] as any;
                for (let item of _data["coordinates"])
                    this.coordinates!.push(Coordinate.fromJS(item));
            }
            else {
                this.coordinates = <any>null;
            }
            this.numPoints = _data["numPoints"] !== undefined ? _data["numPoints"] : <any>null;
            this.isEmpty = _data["isEmpty"] !== undefined ? _data["isEmpty"] : <any>null;
            this.dimension = _data["dimension"] !== undefined ? _data["dimension"] : <any>null;
            this.boundaryDimension = _data["boundaryDimension"] !== undefined ? _data["boundaryDimension"] : <any>null;
            this.x = _data["x"] !== undefined ? _data["x"] : <any>null;
            this.y = _data["y"] !== undefined ? _data["y"] : <any>null;
            this.coordinate = _data["coordinate"] ? Coordinate.fromJS(_data["coordinate"]) : <any>null;
            this.geometryType = _data["geometryType"] !== undefined ? _data["geometryType"] : <any>null;
            this.ogcGeometryType = _data["ogcGeometryType"] !== undefined ? _data["ogcGeometryType"] : <any>null;
            this.boundary = _data["boundary"] ? Geometry.fromJS(_data["boundary"]) : <any>null;
            this.z = _data["z"] !== undefined ? _data["z"] : <any>null;
            this.m = _data["m"] !== undefined ? _data["m"] : <any>null;
        }
    }

    static override fromJS(data: any): Point {
        data = typeof data === 'object' ? data : {};
        let result = new Point();
        result.init(data);
        return result;
    }

    override toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["coordinateSequence"] = this.coordinateSequence ? this.coordinateSequence.toJSON() : <any>null;
        if (Array.isArray(this.coordinates)) {
            data["coordinates"] = [];
            for (let item of this.coordinates)
                data["coordinates"].push(item.toJSON());
        }
        data["numPoints"] = this.numPoints !== undefined ? this.numPoints : <any>null;
        data["isEmpty"] = this.isEmpty !== undefined ? this.isEmpty : <any>null;
        data["dimension"] = this.dimension !== undefined ? this.dimension : <any>null;
        data["boundaryDimension"] = this.boundaryDimension !== undefined ? this.boundaryDimension : <any>null;
        data["x"] = this.x !== undefined ? this.x : <any>null;
        data["y"] = this.y !== undefined ? this.y : <any>null;
        data["coordinate"] = this.coordinate ? this.coordinate.toJSON() : <any>null;
        data["geometryType"] = this.geometryType !== undefined ? this.geometryType : <any>null;
        data["ogcGeometryType"] = this.ogcGeometryType !== undefined ? this.ogcGeometryType : <any>null;
        data["boundary"] = this.boundary ? this.boundary.toJSON() : <any>null;
        data["z"] = this.z !== undefined ? this.z : <any>null;
        data["m"] = this.m !== undefined ? this.m : <any>null;
        super.toJSON(data);
        return data;
    }
}

export interface IPoint extends IGeometry {
    coordinateSequence: CoordinateSequence | null;
    coordinates: Coordinate[] | null;
    numPoints: number;
    isEmpty: boolean;
    dimension: Dimension;
    boundaryDimension: Dimension;
    x: number;
    y: number;
    coordinate: Coordinate | null;
    geometryType: string | null;
    ogcGeometryType: OgcGeometryType;
    boundary: Geometry | null;
    z: number;
    m: number;
}

export abstract class CoordinateSequence implements ICoordinateSequence {
    dimension!: number;
    measures!: number;
    spatial!: number;
    ordinates!: Ordinates;
    hasZ!: boolean;
    hasM!: boolean;
    zOrdinateIndex!: number;
    mOrdinateIndex!: number;
    first!: Coordinate | null;
    last!: Coordinate | null;
    count!: number;

    constructor(data?: ICoordinateSequence) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.dimension = _data["dimension"] !== undefined ? _data["dimension"] : <any>null;
            this.measures = _data["measures"] !== undefined ? _data["measures"] : <any>null;
            this.spatial = _data["spatial"] !== undefined ? _data["spatial"] : <any>null;
            this.ordinates = _data["ordinates"] !== undefined ? _data["ordinates"] : <any>null;
            this.hasZ = _data["hasZ"] !== undefined ? _data["hasZ"] : <any>null;
            this.hasM = _data["hasM"] !== undefined ? _data["hasM"] : <any>null;
            this.zOrdinateIndex = _data["zOrdinateIndex"] !== undefined ? _data["zOrdinateIndex"] : <any>null;
            this.mOrdinateIndex = _data["mOrdinateIndex"] !== undefined ? _data["mOrdinateIndex"] : <any>null;
            this.first = _data["first"] ? Coordinate.fromJS(_data["first"]) : <any>null;
            this.last = _data["last"] ? Coordinate.fromJS(_data["last"]) : <any>null;
            this.count = _data["count"] !== undefined ? _data["count"] : <any>null;
        }
    }

    static fromJS(data: any): CoordinateSequence {
        data = typeof data === 'object' ? data : {};
        throw new Error("The abstract class 'CoordinateSequence' cannot be instantiated.");
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["dimension"] = this.dimension !== undefined ? this.dimension : <any>null;
        data["measures"] = this.measures !== undefined ? this.measures : <any>null;
        data["spatial"] = this.spatial !== undefined ? this.spatial : <any>null;
        data["ordinates"] = this.ordinates !== undefined ? this.ordinates : <any>null;
        data["hasZ"] = this.hasZ !== undefined ? this.hasZ : <any>null;
        data["hasM"] = this.hasM !== undefined ? this.hasM : <any>null;
        data["zOrdinateIndex"] = this.zOrdinateIndex !== undefined ? this.zOrdinateIndex : <any>null;
        data["mOrdinateIndex"] = this.mOrdinateIndex !== undefined ? this.mOrdinateIndex : <any>null;
        data["first"] = this.first ? this.first.toJSON() : <any>null;
        data["last"] = this.last ? this.last.toJSON() : <any>null;
        data["count"] = this.count !== undefined ? this.count : <any>null;
        return data;
    }
}

export interface ICoordinateSequence {
    dimension: number;
    measures: number;
    spatial: number;
    ordinates: Ordinates;
    hasZ: boolean;
    hasM: boolean;
    zOrdinateIndex: number;
    mOrdinateIndex: number;
    first: Coordinate | null;
    last: Coordinate | null;
    count: number;
}

export type Ordinates = 0 | 1 | 1 | 2 | 2 | 3 | 4 | 4 | 7 | 8 | 16 | 32 | 64 | 128 | 256 | 512 | 1024 | 2048 | 4096 | 8192 | 16384 | 32768 | 65535 | 65536 | 65536 | 65539 | 65543 | 131072 | 262144 | 524288 | 1048576 | 2097152 | 4194304 | 8388608 | 16777216 | 33554432 | 67108864 | 134217728 | 268435456 | 536870912 | 1073741824 | -2147483648 | -65536 | -1;

export class Coordinate implements ICoordinate {
    x!: number;
    y!: number;
    z!: number;
    m!: number;
    coordinateValue!: Coordinate | null;
    isValid!: boolean;

    constructor(data?: ICoordinate) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.x = _data["x"] !== undefined ? _data["x"] : <any>null;
            this.y = _data["y"] !== undefined ? _data["y"] : <any>null;
            this.z = _data["z"] !== undefined ? _data["z"] : <any>null;
            this.m = _data["m"] !== undefined ? _data["m"] : <any>null;
            this.coordinateValue = _data["coordinateValue"] ? Coordinate.fromJS(_data["coordinateValue"]) : <any>null;
            this.isValid = _data["isValid"] !== undefined ? _data["isValid"] : <any>null;
        }
    }

    static fromJS(data: any): Coordinate {
        data = typeof data === 'object' ? data : {};
        let result = new Coordinate();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["x"] = this.x !== undefined ? this.x : <any>null;
        data["y"] = this.y !== undefined ? this.y : <any>null;
        data["z"] = this.z !== undefined ? this.z : <any>null;
        data["m"] = this.m !== undefined ? this.m : <any>null;
        data["coordinateValue"] = this.coordinateValue ? this.coordinateValue.toJSON() : <any>null;
        data["isValid"] = this.isValid !== undefined ? this.isValid : <any>null;
        return data;
    }
}

export interface ICoordinate {
    x: number;
    y: number;
    z: number;
    m: number;
    coordinateValue: Coordinate | null;
    isValid: boolean;
}

export type Dimension = 00 | 1 | 1 | 2 | 2 | 3 | -3 | -2 | -1 | -1;

export type OgcGeometryType = 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 10 | 11 | 12 | 13 | 14 | 15 | 16;

export class GeometryFactory implements IGeometryFactory {
    precisionModel!: PrecisionModel | null;
    coordinateSequenceFactory!: CoordinateSequenceFactory | null;
    srid!: number;
    geometryServices!: NtsGeometryServices | null;

    constructor(data?: IGeometryFactory) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.precisionModel = _data["precisionModel"] ? PrecisionModel.fromJS(_data["precisionModel"]) : <any>null;
            this.coordinateSequenceFactory = _data["coordinateSequenceFactory"] ? CoordinateSequenceFactory.fromJS(_data["coordinateSequenceFactory"]) : <any>null;
            this.srid = _data["srid"] !== undefined ? _data["srid"] : <any>null;
            this.geometryServices = _data["geometryServices"] ? NtsGeometryServices.fromJS(_data["geometryServices"]) : <any>null;
        }
    }

    static fromJS(data: any): GeometryFactory {
        data = typeof data === 'object' ? data : {};
        let result = new GeometryFactory();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["precisionModel"] = this.precisionModel ? this.precisionModel.toJSON() : <any>null;
        data["coordinateSequenceFactory"] = this.coordinateSequenceFactory ? this.coordinateSequenceFactory.toJSON() : <any>null;
        data["srid"] = this.srid !== undefined ? this.srid : <any>null;
        data["geometryServices"] = this.geometryServices ? this.geometryServices.toJSON() : <any>null;
        return data;
    }
}

export interface IGeometryFactory {
    precisionModel: PrecisionModel | null;
    coordinateSequenceFactory: CoordinateSequenceFactory | null;
    srid: number;
    geometryServices: NtsGeometryServices | null;
}

export class PrecisionModel implements IPrecisionModel {
    isFloating!: boolean;
    maximumSignificantDigits!: number;
    scale!: number;
    gridSize!: number;
    precisionModelType!: PrecisionModels;

    constructor(data?: IPrecisionModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.isFloating = _data["isFloating"] !== undefined ? _data["isFloating"] : <any>null;
            this.maximumSignificantDigits = _data["maximumSignificantDigits"] !== undefined ? _data["maximumSignificantDigits"] : <any>null;
            this.scale = _data["scale"] !== undefined ? _data["scale"] : <any>null;
            this.gridSize = _data["gridSize"] !== undefined ? _data["gridSize"] : <any>null;
            this.precisionModelType = _data["precisionModelType"] !== undefined ? _data["precisionModelType"] : <any>null;
        }
    }

    static fromJS(data: any): PrecisionModel {
        data = typeof data === 'object' ? data : {};
        let result = new PrecisionModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["isFloating"] = this.isFloating !== undefined ? this.isFloating : <any>null;
        data["maximumSignificantDigits"] = this.maximumSignificantDigits !== undefined ? this.maximumSignificantDigits : <any>null;
        data["scale"] = this.scale !== undefined ? this.scale : <any>null;
        data["gridSize"] = this.gridSize !== undefined ? this.gridSize : <any>null;
        data["precisionModelType"] = this.precisionModelType !== undefined ? this.precisionModelType : <any>null;
        return data;
    }
}

export interface IPrecisionModel {
    isFloating: boolean;
    maximumSignificantDigits: number;
    scale: number;
    gridSize: number;
    precisionModelType: PrecisionModels;
}

export type PrecisionModels = 0 | 1 | 2;

export abstract class CoordinateSequenceFactory implements ICoordinateSequenceFactory {
    ordinates!: Ordinates;

    constructor(data?: ICoordinateSequenceFactory) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.ordinates = _data["ordinates"] !== undefined ? _data["ordinates"] : <any>null;
        }
    }

    static fromJS(data: any): CoordinateSequenceFactory {
        data = typeof data === 'object' ? data : {};
        throw new Error("The abstract class 'CoordinateSequenceFactory' cannot be instantiated.");
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["ordinates"] = this.ordinates !== undefined ? this.ordinates : <any>null;
        return data;
    }
}

export interface ICoordinateSequenceFactory {
    ordinates: Ordinates;
}

export class NtsGeometryServices implements INtsGeometryServices {
    geometryOverlay!: GeometryOverlay | null;
    coordinateEqualityComparer!: CoordinateEqualityComparer | null;
    defaultSRID!: number;
    defaultCoordinateSequenceFactory!: CoordinateSequenceFactory | null;
    defaultPrecisionModel!: PrecisionModel | null;

    constructor(data?: INtsGeometryServices) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.geometryOverlay = _data["geometryOverlay"] ? GeometryOverlay.fromJS(_data["geometryOverlay"]) : <any>null;
            this.coordinateEqualityComparer = _data["coordinateEqualityComparer"] ? CoordinateEqualityComparer.fromJS(_data["coordinateEqualityComparer"]) : <any>null;
            this.defaultSRID = _data["defaultSRID"] !== undefined ? _data["defaultSRID"] : <any>null;
            this.defaultCoordinateSequenceFactory = _data["defaultCoordinateSequenceFactory"] ? CoordinateSequenceFactory.fromJS(_data["defaultCoordinateSequenceFactory"]) : <any>null;
            this.defaultPrecisionModel = _data["defaultPrecisionModel"] ? PrecisionModel.fromJS(_data["defaultPrecisionModel"]) : <any>null;
        }
    }

    static fromJS(data: any): NtsGeometryServices {
        data = typeof data === 'object' ? data : {};
        let result = new NtsGeometryServices();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["geometryOverlay"] = this.geometryOverlay ? this.geometryOverlay.toJSON() : <any>null;
        data["coordinateEqualityComparer"] = this.coordinateEqualityComparer ? this.coordinateEqualityComparer.toJSON() : <any>null;
        data["defaultSRID"] = this.defaultSRID !== undefined ? this.defaultSRID : <any>null;
        data["defaultCoordinateSequenceFactory"] = this.defaultCoordinateSequenceFactory ? this.defaultCoordinateSequenceFactory.toJSON() : <any>null;
        data["defaultPrecisionModel"] = this.defaultPrecisionModel ? this.defaultPrecisionModel.toJSON() : <any>null;
        return data;
    }
}

export interface INtsGeometryServices {
    geometryOverlay: GeometryOverlay | null;
    coordinateEqualityComparer: CoordinateEqualityComparer | null;
    defaultSRID: number;
    defaultCoordinateSequenceFactory: CoordinateSequenceFactory | null;
    defaultPrecisionModel: PrecisionModel | null;
}

export abstract class GeometryOverlay implements IGeometryOverlay {

    constructor(data?: IGeometryOverlay) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
    }

    static fromJS(data: any): GeometryOverlay {
        data = typeof data === 'object' ? data : {};
        throw new Error("The abstract class 'GeometryOverlay' cannot be instantiated.");
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        return data;
    }
}

export interface IGeometryOverlay {
}

export abstract class EqualityComparerOfCoordinate implements IEqualityComparerOfCoordinate {

    constructor(data?: IEqualityComparerOfCoordinate) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
    }

    static fromJS(data: any): EqualityComparerOfCoordinate {
        data = typeof data === 'object' ? data : {};
        throw new Error("The abstract class 'EqualityComparerOfCoordinate' cannot be instantiated.");
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        return data;
    }
}

export interface IEqualityComparerOfCoordinate {
}

export class CoordinateEqualityComparer extends EqualityComparerOfCoordinate implements ICoordinateEqualityComparer {

    constructor(data?: ICoordinateEqualityComparer) {
        super(data);
    }

    override init(_data?: any) {
        super.init(_data);
    }

    static override fromJS(data: any): CoordinateEqualityComparer {
        data = typeof data === 'object' ? data : {};
        let result = new CoordinateEqualityComparer();
        result.init(data);
        return result;
    }

    override toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        super.toJSON(data);
        return data;
    }
}

export interface ICoordinateEqualityComparer extends IEqualityComparerOfCoordinate {
}

export class Envelope implements IEnvelope {
    isNull!: boolean;
    width!: number;
    height!: number;
    diameter!: number;
    minX!: number;
    maxX!: number;
    minY!: number;
    maxY!: number;
    area!: number;
    minExtent!: number;
    maxExtent!: number;
    centre!: Coordinate | null;

    constructor(data?: IEnvelope) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.isNull = _data["isNull"] !== undefined ? _data["isNull"] : <any>null;
            this.width = _data["width"] !== undefined ? _data["width"] : <any>null;
            this.height = _data["height"] !== undefined ? _data["height"] : <any>null;
            this.diameter = _data["diameter"] !== undefined ? _data["diameter"] : <any>null;
            this.minX = _data["minX"] !== undefined ? _data["minX"] : <any>null;
            this.maxX = _data["maxX"] !== undefined ? _data["maxX"] : <any>null;
            this.minY = _data["minY"] !== undefined ? _data["minY"] : <any>null;
            this.maxY = _data["maxY"] !== undefined ? _data["maxY"] : <any>null;
            this.area = _data["area"] !== undefined ? _data["area"] : <any>null;
            this.minExtent = _data["minExtent"] !== undefined ? _data["minExtent"] : <any>null;
            this.maxExtent = _data["maxExtent"] !== undefined ? _data["maxExtent"] : <any>null;
            this.centre = _data["centre"] ? Coordinate.fromJS(_data["centre"]) : <any>null;
        }
    }

    static fromJS(data: any): Envelope {
        data = typeof data === 'object' ? data : {};
        let result = new Envelope();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["isNull"] = this.isNull !== undefined ? this.isNull : <any>null;
        data["width"] = this.width !== undefined ? this.width : <any>null;
        data["height"] = this.height !== undefined ? this.height : <any>null;
        data["diameter"] = this.diameter !== undefined ? this.diameter : <any>null;
        data["minX"] = this.minX !== undefined ? this.minX : <any>null;
        data["maxX"] = this.maxX !== undefined ? this.maxX : <any>null;
        data["minY"] = this.minY !== undefined ? this.minY : <any>null;
        data["maxY"] = this.maxY !== undefined ? this.maxY : <any>null;
        data["area"] = this.area !== undefined ? this.area : <any>null;
        data["minExtent"] = this.minExtent !== undefined ? this.minExtent : <any>null;
        data["maxExtent"] = this.maxExtent !== undefined ? this.maxExtent : <any>null;
        data["centre"] = this.centre ? this.centre.toJSON() : <any>null;
        return data;
    }
}

export interface IEnvelope {
    isNull: boolean;
    width: number;
    height: number;
    diameter: number;
    minX: number;
    maxX: number;
    minY: number;
    maxY: number;
    area: number;
    minExtent: number;
    maxExtent: number;
    centre: Coordinate | null;
}

export type PickupType = 0 | 1;

export class Delivery implements IDelivery {
    gid!: string;
    deliveryName!: string;
    contactName!: string;
    contactPhone!: string;
    shape!: Point;
    stopTime!: number;
    vehicleId!: string;
    deliveryDays!: DeliveryDay[];

    constructor(data?: IDelivery) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.gid = _data["gid"] !== undefined ? _data["gid"] : <any>null;
            this.deliveryName = _data["deliveryName"] !== undefined ? _data["deliveryName"] : <any>null;
            this.contactName = _data["contactName"] !== undefined ? _data["contactName"] : <any>null;
            this.contactPhone = _data["contactPhone"] !== undefined ? _data["contactPhone"] : <any>null;
            this.shape = _data["shape"] ? Point.fromJS(_data["shape"]) : <any>null;
            this.stopTime = _data["stopTime"] !== undefined ? _data["stopTime"] : <any>null;
            this.vehicleId = _data["vehicleId"] !== undefined ? _data["vehicleId"] : <any>null;
            if (Array.isArray(_data["deliveryDays"])) {
                this.deliveryDays = [] as any;
                for (let item of _data["deliveryDays"])
                    this.deliveryDays!.push(DeliveryDay.fromJS(item));
            }
            else {
                this.deliveryDays = <any>null;
            }
        }
    }

    static fromJS(data: any): Delivery {
        data = typeof data === 'object' ? data : {};
        let result = new Delivery();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["gid"] = this.gid !== undefined ? this.gid : <any>null;
        data["deliveryName"] = this.deliveryName !== undefined ? this.deliveryName : <any>null;
        data["contactName"] = this.contactName !== undefined ? this.contactName : <any>null;
        data["contactPhone"] = this.contactPhone !== undefined ? this.contactPhone : <any>null;
        data["shape"] = this.shape ? this.shape.toJSON() : <any>null;
        data["stopTime"] = this.stopTime !== undefined ? this.stopTime : <any>null;
        data["vehicleId"] = this.vehicleId !== undefined ? this.vehicleId : <any>null;
        if (Array.isArray(this.deliveryDays)) {
            data["deliveryDays"] = [];
            for (let item of this.deliveryDays)
                data["deliveryDays"].push(item.toJSON());
        }
        return data;
    }
}

export interface IDelivery {
    gid: string;
    deliveryName: string;
    contactName: string;
    contactPhone: string;
    shape: Point;
    stopTime: number;
    vehicleId: string;
    deliveryDays: DeliveryDay[];
}

export class DeliveryDay implements IDeliveryDay {
    gid!: string;
    deliveryId!: string;
    weekday!: number;

    constructor(data?: IDeliveryDay) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.gid = _data["gid"] !== undefined ? _data["gid"] : <any>null;
            this.deliveryId = _data["deliveryId"] !== undefined ? _data["deliveryId"] : <any>null;
            this.weekday = _data["weekday"] !== undefined ? _data["weekday"] : <any>null;
        }
    }

    static fromJS(data: any): DeliveryDay {
        data = typeof data === 'object' ? data : {};
        let result = new DeliveryDay();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["gid"] = this.gid !== undefined ? this.gid : <any>null;
        data["deliveryId"] = this.deliveryId !== undefined ? this.deliveryId : <any>null;
        data["weekday"] = this.weekday !== undefined ? this.weekday : <any>null;
        return data;
    }
}

export interface IDeliveryDay {
    gid: string;
    deliveryId: string;
    weekday: number;
}

export class Stops implements IStops {
    depot!: Depot;
    pickups!: Pickup[];
    deliveries!: Delivery[];

    constructor(data?: IStops) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.depot = _data["depot"] ? Depot.fromJS(_data["depot"]) : <any>null;
            if (Array.isArray(_data["pickups"])) {
                this.pickups = [] as any;
                for (let item of _data["pickups"])
                    this.pickups!.push(Pickup.fromJS(item));
            }
            else {
                this.pickups = <any>null;
            }
            if (Array.isArray(_data["deliveries"])) {
                this.deliveries = [] as any;
                for (let item of _data["deliveries"])
                    this.deliveries!.push(Delivery.fromJS(item));
            }
            else {
                this.deliveries = <any>null;
            }
        }
    }

    static fromJS(data: any): Stops {
        data = typeof data === 'object' ? data : {};
        let result = new Stops();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["depot"] = this.depot ? this.depot.toJSON() : <any>null;
        if (Array.isArray(this.pickups)) {
            data["pickups"] = [];
            for (let item of this.pickups)
                data["pickups"].push(item.toJSON());
        }
        if (Array.isArray(this.deliveries)) {
            data["deliveries"] = [];
            for (let item of this.deliveries)
                data["deliveries"].push(item.toJSON());
        }
        return data;
    }
}

export interface IStops {
    depot: Depot;
    pickups: Pickup[];
    deliveries: Delivery[];
}

export class Depot implements IDepot {
    gid!: string;
    depotName!: string;
    shape!: Point;
    areaId!: string;

    constructor(data?: IDepot) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.gid = _data["gid"] !== undefined ? _data["gid"] : <any>null;
            this.depotName = _data["depotName"] !== undefined ? _data["depotName"] : <any>null;
            this.shape = _data["shape"] ? Point.fromJS(_data["shape"]) : <any>null;
            this.areaId = _data["areaId"] !== undefined ? _data["areaId"] : <any>null;
        }
    }

    static fromJS(data: any): Depot {
        data = typeof data === 'object' ? data : {};
        let result = new Depot();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["gid"] = this.gid !== undefined ? this.gid : <any>null;
        data["depotName"] = this.depotName !== undefined ? this.depotName : <any>null;
        data["shape"] = this.shape ? this.shape.toJSON() : <any>null;
        data["areaId"] = this.areaId !== undefined ? this.areaId : <any>null;
        return data;
    }
}

export interface IDepot {
    gid: string;
    depotName: string;
    shape: Point;
    areaId: string;
}

export class ApiException extends Error {
    override message: string;
    status: number;
    response: string;
    headers: { [key: string]: any; };
    result: any;

    constructor(message: string, status: number, response: string, headers: { [key: string]: any; }, result: any) {
        super();

        this.message = message;
        this.status = status;
        this.response = response;
        this.headers = headers;
        this.result = result;
    }

    protected isApiException = true;

    static isApiException(obj: any): obj is ApiException {
        return obj.isApiException === true;
    }
}

function throwException(message: string, status: number, response: string, headers: { [key: string]: any; }, result?: any): any {
    if (result !== null && result !== undefined)
        throw result;
    else
        throw new ApiException(message, status, response, headers, null);
}